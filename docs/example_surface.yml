schema: https://main-fmu-schemas-dev.radix.equinor.com/schemas/0.8.0/fmu_results.json
version: "0.8.0" # including for REP and others to build logic on.
source: fmu # always included, and always this value if FMU made it. For quick identification for external consumers.

tracklog:
  - datetime: 2020-10-28T14:28:02
    user:
      id: peesv
    event: created
  - datetime: 2020-10-28T14:46:14
    user:
      id: peesv
    event: updated

class: surface

# fmu:
# The fmu block in data objects have more sub-elements compared to ensemble objects.

fmu:
  model:
    name: ff
    revision: 21.0.0.dev
    description:
      - detailed description
      - optional

  workflow: # not sure, but a reference to the workflow / job that made this. Making it expandable.
    reference: rms/structural_model

  case:
    name: MyCaseName
    uuid: 44cd1b84-766f-4c93-9050-g921861d9420 # (pseudo-)random valid uuid4
    user:
      id: jriv # $USER from ERT
    description:
      - yet other detailed description
      - optional

  iteration:
    id: 0 # always an int, will be 0 for e.g. "pred"
    uid: 44cd1b84-766f-4c93-9050-g921861d9420--iter-0 # case.uuid + iteration.name
    name: "iter-0" # /"pred"
    restart_from: 15ce3b84-766f-4c93-9050-b154861f9100--0 # fmu.case.id for another iteration/case

  realization: # could be expanded in the future?
    name: "realization-33"
    id: 33
    uid: 44cd1b84-766f-4c93-9050-g921861d9420--0--33 # case.uuid + iteration.id + realization.id
    parameters: # directly pass parameters.txt. This is potentially a lot of content, only a stub is included here.
      - SENSNAME: faultseal
      - SENSCASE: low
      - RMS_SEED: 1006
      - KVKH_CHANNEL: 0.6
      - KVKH_CREVASSE: 0.3
      - KVKH_LS: 0.7
      - KVKH_US: 0.6
      - FAULT_SEAL_SCALING: 0.1
      - FWL_CENTRAL: 1677
    jobs: # directly pass jobs.json. This is a lot of content, only a stub is included here.
      umask: "0002"
      DATA_ROOT: /some/path/20.4.0_20201106/ert/model
      anything: something
      something:
        anything: something
      global_update_path: {}
      jobList:
        - name: MAKE_DIRECTORY
          min_arg: 1
          anything: something

file:
  relative_path: share/results/maps/volantis_gp_base--amplitude.gri
  absolute_path: /some/absolute/path/share/results/maps/volantis_gp_base--amplitude.gri
  checksum_md5: kjhsdfvsdlfk23knerknvk23 # checksum of the file, not the data.

data: # The data block describes the actual data (e.g. surface). Only present in data objects
  # if stratigraphic, name must match the strat column. This is the official name of this surface.
  name: volantis_top-volantis_base
  stratigraphic: false # if true, this is a stratigraphic surface found in the strat column
  offset: 0.0 # to be used if a specific horizon is represented with an offset.

  top: # not required, but allowed
    name: volantis_gp_top
    stratigraphic: true
    offset: 2.0
  base:
    name: volantis_gp_top
    stratigraphic: true
    offset: 8.3

  stratigraphic_alias: # other stratigraphic entities this corresponds to in the strat column, e.g. Top Viking vs Top Draupne. Ref issue.
    - SomeName Fm. 1 Top
  alias: # other known-as names, such as name used inside RMS etc
    - somename_fm_1_top
    - top_somename

  # content is flexible more than standardized for now.
  content: depth

  # no content-specific attribute for "depth" but can come in the future

  properties: # what the values actually show. List, only one for IRAP Binary surfaces. Multiple for 3d grid or multi-parameter surfaces. First is geometry.
    - name: PropertyName
      attribute: owc
      is_discrete: false # to be used for discrete values in surfaces.
      calculation: null # max/min/rms/var/maxpos/sum/etc

  format: irap_binary
  layout: regular # / cornerpoint / structured / etc
  unit: m
  vertical_domain: depth # / time / null
  depth_reference: msl # / seabed / etc # mandatory when vertical_domain is depth?
  grid_model: # Making this an object to allow for expanding in the future
    name: MyGrid # important for data identification, also important for other data types
  spec: # class/layout dependent, optional? Can spec be expanded to work for all data types?
    ncol: 281
    nrow: 441
    nlay: 333
    xori: 461499.9997558594
    yori: 5926500.0
    xinc: 25.0
    yinc: 25.0
    yflip: 1
    rotation: 30.000000834826057
    undef: 1.0e+33 # Allow both number and string
  bbox:
    xmin: 456012.5003497944
    xmax: 467540.52762886323
    ymin: 5926499.999511719
    ymax: 5939492.128326312
    zmin: 1244.039
    zmax: 2302.683
  time:
    - value: 2020-10-28T14:28:02
      label: "some label"
    - value: 2020-10-28T14:28:02
      label: "some other label"
  is_prediction: true # A mechanism for separating pure QC output from actual predictions
  is_observation: true # Used for 4D data currently but also valid for other data?
  description:
    - Depth surfaces extracted from the structural model
    - Made in a FMU work flow

display:
  name: Top Volantis
  line:
    show: true
    color: black
  points:
    show: false
    color: null
  contours:
    show: true
    color: black
  fill:
    show: true
    colors: gist_earth

access:
  asset:
    name: Drogon
  ssdl:
    access_level: internal
    rep_include: true

masterdata:
  smda:
    country:
      - identifier: Norway
        uuid: ad214d85-8a1d-19da-e053-c918a4889309
    discovery:
      - short_identifier: DROGON
        uuid: ad214d85-8a1d-19da-e053-c918a4889309
    field:
      - identifier: DROGON
        uuid: 00000000-0000-0000-0000-000000000000
    coordinate_system: # changing from "coordinates" to clarify this is not content
      identifier: ST_WGS84_UTM37N_P32637
      uuid: ad214d85-dac7-19da-e053-c918a4889309
    stratigraphic_column:
      identifier: DROGON_2020
      uuid: some-unique-id-to-be-provided-by-smda
