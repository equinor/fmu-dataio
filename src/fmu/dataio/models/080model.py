# generated by datamodel-codegen:
#   filename:  fmu_results.json
#   version:   0.25.2

from __future__ import annotations

from pydantic import BaseModel, Field


class Datetime(BaseModel):
    type: str
    examples: list[str]


class Uuid(BaseModel):
    type: str
    pattern: str
    examples: list[str]


class Id(BaseModel):
    title: str
    type: str
    examples: list[str]


class Properties(BaseModel):
    id: Id


class User(BaseModel):
    type: str
    required: list[str]
    properties: Properties


class Items(BaseModel):
    type: str
    examples: list[str]


class FieldDescription(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    items: Items


class Generic(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    datetime: Datetime
    uuid: Uuid
    user: User
    field_description: FieldDescription = Field(..., alias="_description")


class Value(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Label(BaseModel):
    type: str
    examples: list[str]


class Properties1(BaseModel):
    value: Value
    label: Label


class FmuTime(BaseModel):
    title: str
    description: str
    type: list[str]
    properties: Properties1


class Class(BaseModel):
    title: str
    type: str
    examples: list[str]
    enum: list[str]


class Source(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    description: str
    type: str
    const: str


class Version(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    title: str
    type: str
    enum: list[str]
    example: str


class Datetime1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class User1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Event(BaseModel):
    type: str
    examples: list[str]


class Properties2(BaseModel):
    datetime: Datetime1
    user: User1
    event: Event


class TracklogEvent(BaseModel):
    type: str
    properties: Properties2


class Items1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Tracklog(BaseModel):
    type: str
    items: Items1


class Top(BaseModel):
    required: list[str]


class Base(BaseModel):
    required: list[str]


class Dependencies(BaseModel):
    top: Top
    base: Base


class Name(BaseModel):
    type: str
    description: str
    examples: list[str]


class Stratigraphic(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    description: str
    examples: list[bool]


class Alias(BaseModel):
    type: str
    items: Items1


class StratigraphicAlias(BaseModel):
    type: str
    items: Items1


class Offset(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    example: float


class Name1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Stratigraphic1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Offset1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties4(BaseModel):
    name: Name1
    stratigraphic: Stratigraphic1
    offset: Offset1


class Top1(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    properties: Properties4


class Properties5(BaseModel):
    name: Name1
    stratigraphic: Stratigraphic1
    offset: Offset1


class Base1(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    properties: Properties5


class Content(BaseModel):
    type: str
    description: str
    enum: list[str]
    examples: list[str]


class Tagname(BaseModel):
    type: str
    description: str
    examples: list[str]


class Name3(BaseModel):
    type: str
    examples: list[str]


class Attribute(BaseModel):
    type: str
    examples: list[str]


class IsDiscrete(BaseModel):
    type: str
    examples: list[bool]


class Properties7(BaseModel):
    name: Name3
    attribute: Attribute
    is_discrete: IsDiscrete


class Items4(BaseModel):
    type: str
    properties: Properties7


class Properties6(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    description: str
    type: str
    items: Items4


class Format(BaseModel):
    type: str
    examples: list[str]


class Layout(BaseModel):
    type: str
    examples: list[str]


class Unit(BaseModel):
    type: list[str]
    examples: list[str]


class VerticalDomain(BaseModel):
    type: str
    enum: list[str]
    examples: list[str]


class DepthReference(BaseModel):
    type: list[str]
    examples: list[str]
    enum: list[str | None]


class UndefIsZero(BaseModel):
    description: str
    type: str
    examples: list[str]


class Name4(BaseModel):
    type: list[str]
    examples: list[str]


class Properties8(BaseModel):
    name: Name4


class GridModel(BaseModel):
    type: str
    properties: Properties8


class Ncol(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    examples: list[int]


class Nrow(BaseModel):
    type: str
    examples: list[int]


class Nlay(BaseModel):
    type: str
    examples: list[int]


class Xori(BaseModel):
    type: str
    examples: list[float]


class Yori(BaseModel):
    type: str
    examples: list[float]


class Xinc(BaseModel):
    type: str
    examples: list[float]


class Yflip(BaseModel):
    type: str
    field_comment: str = Field(..., alias="$comment")
    enum: list[int]
    examples: list[int]


class Rotation(BaseModel):
    type: str
    examples: list[str]


class Undef(BaseModel):
    type: str
    field_comment: str = Field(..., alias="$comment")
    examples: list[float]


class Npolys(BaseModel):
    description: str
    type: str
    examples: list[int]


class Size(BaseModel):
    description: str
    type: str
    examples: list[int]


class Items5(BaseModel):
    type: str
    examples: list[str]


class Columns(BaseModel):
    description: str
    type: str
    items: Items5


class Properties9(BaseModel):
    ncol: Ncol
    nrow: Nrow
    nlay: Nlay
    xori: Xori
    yori: Yori
    xinc: Xinc
    yflip: Yflip
    rotation: Rotation
    undef: Undef
    npolys: Npolys
    size: Size
    columns: Columns


class Spec(BaseModel):
    type: str
    properties: Properties9


class Xmin(BaseModel):
    type: str
    examples: list[float]


class Xmax(BaseModel):
    type: str
    examples: list[float]


class Ymin(BaseModel):
    type: str
    examples: list[float]


class Ymax(BaseModel):
    type: str
    examples: list[float]


class Zmin(BaseModel):
    type: list[str]
    examples: list[float | None]


class Zmax(BaseModel):
    type: list[str]
    examples: list[float | None]


class Properties10(BaseModel):
    xmin: Xmin
    xmax: Xmax
    ymin: Ymin
    ymax: Ymax
    zmin: Zmin
    zmax: Zmax


class Bbox(BaseModel):
    type: str
    required: list[str]
    properties: Properties10


class T0(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class T1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties11(BaseModel):
    t0: T0
    t1: T1


class Time(BaseModel):
    type: str
    properties: Properties11


class IsPrediction(BaseModel):
    title: str
    field_comment: str = Field(..., alias="$comment")
    type: str
    examples: list[bool]


class IsObservation(BaseModel):
    title: str
    field_comment: str = Field(..., alias="$comment")
    type: str
    examples: list[bool]


class Contact(BaseModel):
    type: str
    enum: list[str]
    field_comment: str = Field(..., alias="$comment")
    examples: list[str]


class Truncated(BaseModel):
    type: str
    field_comment: str = Field(..., alias="$comment")
    examples: list[bool]


class Properties12(BaseModel):
    contact: Contact
    truncated: Truncated


class FluidContact(BaseModel):
    type: str
    description: str
    properties: Properties12


class Contact1(BaseModel):
    type: str


class Properties13(BaseModel):
    contact: Contact1


class FieldOutline(BaseModel):
    description: str
    type: str
    required: list[str]
    properties: Properties13


class Id1(BaseModel):
    description: str
    type: str


class Properties14(BaseModel):
    id: Id1


class FieldRegion(BaseModel):
    description: str
    type: str
    required: list[str]
    properties: Properties14


class Description(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Calculation(BaseModel):
    type: str
    examples: list[str]


class Zrange(BaseModel):
    type: str
    examples: list[float]


class FilterSize(BaseModel):
    type: str
    examples: list[float]


class ScalingFactor(BaseModel):
    type: str
    examples: list[float]


class StackingOffset(BaseModel):
    type: str
    examples: list[str]


class Properties15(BaseModel):
    attribute: Attribute
    calculation: Calculation
    zrange: Zrange
    filter_size: FilterSize
    scaling_factor: ScalingFactor
    stacking_offset: StackingOffset


class Seismic(BaseModel):
    type: str
    description: str
    properties: Properties15


class Properties3(BaseModel):
    name: Name
    stratigraphic: Stratigraphic
    alias: Alias
    stratigraphic_alias: StratigraphicAlias
    offset: Offset
    top: Top1
    base: Base1
    content: Content
    tagname: Tagname
    properties: Properties6
    format: Format
    layout: Layout
    unit: Unit
    vertical_domain: VerticalDomain
    depth_reference: DepthReference
    undef_is_zero: UndefIsZero
    grid_model: GridModel
    spec: Spec
    bbox: Bbox
    time: Time
    is_prediction: IsPrediction
    is_observation: IsObservation
    fluid_contact: FluidContact
    field_outline: FieldOutline
    field_region: FieldRegion
    description: Description
    seismic: Seismic


class Data(BaseModel):
    type: str
    title: str
    required: list[str]
    dependencies: Dependencies
    properties: Properties3


class Name5(BaseModel):
    type: str
    examples: list[str]


class Subtitle(BaseModel):
    type: str
    examples: list[str]


class Show(BaseModel):
    type: str
    examples: list[bool]


class Color(BaseModel):
    type: str
    examples: list[str]


class Properties17(BaseModel):
    show: Show
    color: Color


class Line(BaseModel):
    type: str
    properties: Properties17


class Properties18(BaseModel):
    show: Show
    color: Color


class Points(BaseModel):
    type: str
    properties: Properties18


class Color2(BaseModel):
    description: str
    type: str
    examples: list[str]


class Increment(BaseModel):
    description: str
    type: str
    examples: list[float]


class Properties19(BaseModel):
    show: Show
    color: Color2
    increment: Increment


class Contours(BaseModel):
    type: str
    properties: Properties19


class Color3(BaseModel):
    type: str
    examples: list[str]


class Colormap(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    description: str
    type: str
    examples: list[str]


class DisplayMin(BaseModel):
    description: str
    type: str
    examples: list[float]


class DisplayMax(BaseModel):
    description: str
    type: str
    examples: list[float]


class Properties20(BaseModel):
    show: Show
    color: Color3
    colormap: Colormap
    display_min: DisplayMin
    display_max: DisplayMax


class Fill(BaseModel):
    type: str
    properties: Properties20


class Properties16(BaseModel):
    name: Name5
    subtitle: Subtitle
    line: Line
    points: Points
    contours: Contours
    fill: Fill


class Display(BaseModel):
    type: str
    properties: Properties16


class Properties22(BaseModel):
    name: Name5


class Asset(BaseModel):
    type: str
    required: list[str]
    properties: Properties22


class AccessLevel(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    enum: list[str]


class RepInclude(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    examples: list[bool]


class Properties23(BaseModel):
    access_level: AccessLevel
    rep_include: RepInclude


class Ssdl(BaseModel):
    type: str
    field_comment: str = Field(..., alias="$comment")
    required: list[str]
    properties: Properties23


class Classification(BaseModel):
    type: str
    enum: list[str]
    examples: list[str]


class Properties21(BaseModel):
    asset: Asset
    ssdl: Ssdl
    classification: Classification


class Access(BaseModel):
    type: str
    properties: Properties21


class Identifier(BaseModel):
    type: str
    examples: list[str]


class Uuid1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties26(BaseModel):
    identifier: Identifier
    uuid: Uuid1


class Items6(BaseModel):
    type: str
    required: list[str]
    properties: Properties26


class Country(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    items: Items6


class ShortIdentifier(BaseModel):
    type: str
    examples: list[str]


class Properties27(BaseModel):
    short_identifier: ShortIdentifier
    uuid: Uuid1


class Items7(BaseModel):
    type: str
    required: list[str]
    properties: Properties27


class Discovery(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    items: Items7


class Properties28(BaseModel):
    identifier: Identifier
    uuid: Uuid1


class Items8(BaseModel):
    type: str
    required: list[str]
    properties: Properties28


class FieldModel(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    items: Items8


class Properties29(BaseModel):
    identifier: Identifier
    uuid: Uuid1


class CoordinateSystem(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    required: list[str]
    properties: Properties29


class Properties30(BaseModel):
    identifier: Identifier
    uuid: Uuid1


class StratigraphicColumn(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    required: list[str]
    properties: Properties30


class Properties25(BaseModel):
    country: Country
    discovery: Discovery
    field: FieldModel
    coordinate_system: CoordinateSystem
    stratigraphic_column: StratigraphicColumn


class Smda(BaseModel):
    type: str
    required: list[str]
    properties: Properties25


class Properties24(BaseModel):
    smda: Smda


class Masterdata(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    required: list[str]
    properties: Properties24


class Revision(BaseModel):
    type: str
    examples: list[str]


class Description1(BaseModel):
    description: str
    field_ref: str = Field(..., alias="$ref")


class Properties31(BaseModel):
    name: Name5
    revision: Revision
    description: Description1


class Model1(BaseModel):
    type: str
    properties: Properties31


class Reference(BaseModel):
    type: str
    description: str


class Properties32(BaseModel):
    reference: Reference


class Workflow(BaseModel):
    type: str
    properties: Properties32


class Name8(BaseModel):
    type: str
    description: str
    examples: list[str]


class User2(BaseModel):
    description: str
    field_ref: str = Field(..., alias="$ref")


class Description2(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties33(BaseModel):
    name: Name8
    uuid: Uuid1
    user: User2
    description: Description2


class Case(BaseModel):
    type: str
    required: list[str]
    properties: Properties33


class Name9(BaseModel):
    description: str
    type: str
    examples: list[str]


class Id2(BaseModel):
    description: str
    type: str
    examples: list[int]


class RestartFrom(BaseModel):
    description: str
    field_ref: str = Field(..., alias="$ref")


class Properties34(BaseModel):
    name: Name9
    id: Id2
    uuid: Uuid1
    restart_from: RestartFrom


class Iteration(BaseModel):
    type: str
    required: list[str]
    properties: Properties34


class Id3(BaseModel):
    type: str
    description: str
    examples: list[int]


class Items9(BaseModel):
    type: str


class Parameters(BaseModel):
    type: str
    description: str
    items: Items9


class Jobs(BaseModel):
    type: str
    description: str


class Properties35(BaseModel):
    name: Name9
    id: Id3
    uuid: Uuid1
    parameters: Parameters
    jobs: Jobs


class Realization(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    required: list[str]
    properties: Properties35


class Operation(BaseModel):
    type: str
    description: str


class Items10(BaseModel):
    type: str
    examples: list[int]


class RealizationIds(BaseModel):
    type: str
    description: str
    items: Items10


class Items11(BaseModel):
    type: str


class Parameters1(BaseModel):
    type: str
    description: str
    items: Items11


class Id4(BaseModel):
    type: str
    description: str
    field_comment: str = Field(..., alias="$comment")
    examples: list[str]


class Properties36(BaseModel):
    operation: Operation
    realization_ids: RealizationIds
    parameters: Parameters1
    id: Id4


class Aggregation(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    type: str
    required: list[str]
    properties: Properties36


class Stage(BaseModel):
    type: str
    examples: list[str]


class Properties37(BaseModel):
    stage: Stage


class Context(BaseModel):
    description: str
    type: str
    required: list[str]
    properties: Properties37


class Fmu(BaseModel):
    model: Model1
    workflow: Workflow
    case: Case
    iteration: Iteration
    realization: Realization
    aggregation: Aggregation
    context: Context


class RelativePath(BaseModel):
    type: str
    description: str
    examples: list[str]


class AbsolutePath(BaseModel):
    type: str
    description: str
    examples: list[str]


class ChecksumMd5(BaseModel):
    description: str
    type: str
    examples: list[str]


class SizeBytes(BaseModel):
    description: str
    type: str
    examples: list[int]


class Properties38(BaseModel):
    relative_path: RelativePath
    absolute_path: AbsolutePath
    checksum_md5: ChecksumMd5
    size_bytes: SizeBytes


class File(BaseModel):
    description: str
    field_comment: str = Field(..., alias="$comment")
    type: str
    required: list[str]
    properties: Properties38


class Definitions(BaseModel):
    generic: Generic
    fmu_time: FmuTime
    class_: Class = Field(..., alias="class")
    source: Source
    version: Version
    tracklog_event: TracklogEvent
    tracklog: Tracklog
    data: Data
    display: Display
    access: Access
    masterdata: Masterdata
    fmu: Fmu
    file: File


class Source1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Version1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Data1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Tracklog1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Access1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Masterdata1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Class1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties39(BaseModel):
    source: Source1
    version: Version1
    data: Data1
    tracklog: Tracklog1
    access: Access1
    masterdata: Masterdata1
    class_: Class1 = Field(..., alias="class")


class Not(BaseModel):
    enum: list[str]


class Class2(BaseModel):
    enum: list[str] | None = None
    not_: Not | None = Field(default=None, alias="not")


class Model2(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Case1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Iteration1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Realization1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Workflow1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Aggregation1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties41(BaseModel):
    model: Model2
    case: Case1
    iteration: Iteration1 | None = None
    realization: Realization1 | None = None
    workflow: Workflow1 | None = None
    aggregation: Aggregation1 | None = None


class Not1(BaseModel):
    required: list[str]


class Aggregation2(BaseModel):
    not_: Not1 = Field(..., alias="not")


class Realization2(BaseModel):
    not_: Not1 = Field(..., alias="not")


class Dependencies1(BaseModel):
    aggregation: Aggregation2
    realization: Realization2


class Fmu1(BaseModel):
    description: str
    field_comment: str = Field(..., alias="$comment")
    type: str | None = None
    required: list[str]
    properties: Properties41
    dependencies: Dependencies1 | None = None


class Access2(BaseModel):
    required: list[str]


class File1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Content1(BaseModel):
    const: str


class Properties42(BaseModel):
    content: Content1


class If(BaseModel):
    properties: Properties42


class Then(BaseModel):
    required: list[str]


class AllOfItem(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    if_: If = Field(..., alias="if")
    then: Then


class Data2(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    all_of: list[AllOfItem] = Field(..., alias="allOf")


class Properties40(BaseModel):
    class_: Class2 = Field(..., alias="class")
    fmu: Fmu1
    access: Access2
    file: File1 | None = None
    data: Data2 | None = None


class Class3(BaseModel):
    enum: list[str]


class Properties43(BaseModel):
    class_: Class3 = Field(..., alias="class")


class If1(BaseModel):
    properties: Properties43


class Data3(BaseModel):
    required: list[str]


class Properties44(BaseModel):
    data: Data3


class Then1(BaseModel):
    properties: Properties44


class OneOfItem(BaseModel):
    field_comment: str = Field(..., alias="$comment")
    properties: Properties40
    required: list[str] | None = None
    if_: If1 | None = Field(default=None, alias="if")
    then: Then1 | None = None


class Model(BaseModel):
    field_schema: str = Field(..., alias="$schema")
    field_id: str = Field(..., alias="$id")
    field_contractual: list[str] = Field(..., alias="$contractual")
    definitions: Definitions
    field_comment: str = Field(..., alias="$comment")
    required: list[str]
    properties: Properties39
    one_of: list[OneOfItem] = Field(..., alias="oneOf")
