# generated by datamodel-codegen:
#   filename:  fmu_results_090.json
#   version:   0.25.2

from __future__ import annotations

from enum import Enum
from typing import Any, List, Literal, Union

from pydantic import BaseModel, Field, RootModel
from typing_extensions import Annotated


class Generic(RootModel[Any]):
    root: Any


class MetadataClass(str, Enum):
    case = "case"
    surface = "surface"
    table = "table"
    cpgrid = "cpgrid"
    cpgrid_property = "cpgrid_property"
    polygons = "polygons"
    cube = "cube"
    well = "well"
    points = "points"


class Source(RootModel[Literal["fmu"]]):
    root: Literal["fmu"] = Field(..., description="Data source (FMU)")


class FMUResultsMetadataVersion(RootModel[Literal["0.9.0"]]):
    root: Literal["0.9.0"] = Field(
        ..., examples=["1.2.3"], title="FMU results metadata version"
    )


class Property(BaseModel):
    name: str | None = Field(default=None, examples=["MyPropertyName"])
    attribute: str | None = Field(default=None, examples=["MyAttributeName"])
    is_discrete: bool | None = Field(default=None, examples=[True, False])


class VerticalDomain(str, Enum):
    depth = "depth"
    time = "time"


class DepthReference(Enum):
    msl = "msl"
    sb = "sb"
    rkb = "rkb"
    none_type_none = None


class GridModel(BaseModel):
    name: str | None = Field(default=None, examples=["MyGrid"])


class Yflip(int, Enum):
    integer_0 = 0
    integer_1 = 1


class Spec(BaseModel):
    ncol: int | None = Field(default=None, examples=[281])
    nrow: int | None = Field(default=None, examples=[441])
    nlay: int | None = Field(default=None, examples=[333])
    xori: float | None = Field(default=None, examples=[461499.9997558594])
    yori: float | None = Field(default=None, examples=[461499.9997558594])
    xinc: float | None = Field(default=None, examples=[25])
    yflip: Yflip | None = Field(default=None, examples=[1])
    rotation: float | None = Field(default=None, examples=["30.00000000231"])
    undef: float | None = Field(default=None, examples=["1e+33"])
    npolys: int | None = Field(
        default=None,
        description="The number of individual polygons in the data object",
        examples=[1],
    )


class Bbox(BaseModel):
    xmin: float = Field(..., examples=[456012.5003497944])
    xmax: float = Field(..., examples=[467540.52762886323])
    ymin: float = Field(..., examples=[5926499.999511719])
    ymax: float = Field(..., examples=[5939492.128326312])
    zmin: float | None = Field(default=None, examples=[1244.039, None])
    zmax: float | None = Field(default=None, examples=[2302.683, None])


class Line(BaseModel):
    show: bool | None = Field(default=None, examples=[True])
    color: str | None = Field(default=None, examples=["black", "#000000"])


class Points(BaseModel):
    show: bool | None = Field(default=None, examples=[True])
    color: str | None = Field(default=None, examples=["black", "#000000"])


class Contours(BaseModel):
    show: bool | None = Field(default=None, examples=[True])
    color: str | None = Field(
        default=None,
        description="The color of the contour lines",
        examples=["black", "#000000"],
    )
    increment: float | None = Field(
        default=None,
        description="The contour increment in same values as the data",
        examples=[20],
    )


class Fill(BaseModel):
    show: bool | None = Field(default=None, examples=[True])
    color: str | None = Field(default=None, examples=["black", "#000000"])
    colormap: str | None = Field(
        default=None,
        description="named reference to a colormap",
        examples=["gist_earth"],
    )
    display_min: float | None = Field(
        default=None,
        description="The low-side boundary to use for fill color",
        examples=[1000],
    )
    display_max: float | None = Field(
        default=None,
        description="The high-side boundary to use for fill color",
        examples=[1600],
    )


class Display(BaseModel):
    name: str | None = Field(default=None, examples=["Top Volantis"])
    subtitle: str | None = Field(default=None, examples=["Some subtitle"])
    line: Line | None = None
    points: Points | None = None
    contours: Contours | None = None
    fill: Fill | None = None


class Asset(BaseModel):
    name: str = Field(..., examples=["Drogon"])


class Access(BaseModel):
    asset: Asset | None = None


class Workflow1(BaseModel):
    reference: str | None = Field(
        default=None,
        description="Reference to the part of the FMU workflow that produced this",
    )


class Aggregation1(BaseModel):
    operation: str = Field(..., description="The aggregation performed")
    realization_ids: list[int] = Field(
        ..., description="Array of realization ids included in this aggregation"
    )
    parameters: dict[str, Any] | None = Field(
        default=None, description="Parameters for this realization"
    )
    id: str | None = Field(
        default=None,
        description="The ID of this aggregation",
        examples=["15ce3b84-766f-4c93-9050-b154861f9100"],
    )


class File(BaseModel):
    """
    Block describing the file as the data appear in FMU context
    """

    relative_path: str = Field(
        ...,
        description="The file path relative to RUNPATH",
        examples=["share/results/maps/volantis_gp_base--depth.gri"],
    )
    absolute_path: str | None = Field(
        default=None,
        description="The absolute file path",
        examples=["/abs/path/share/results/maps/volantis_gp_base--depth.gri"],
    )
    checksum_md5: str = Field(
        ...,
        description="md5 checksum of the file or bytestring",
        examples=["kjhsdfvsdlfk23knerknvk23"],
    )


class Name(RootModel[str]):
    root: str = Field(
        ...,
        description=(
            "Name of the surface. If stratigraphic, match "
            "the entry in the stratigraphic column"
        ),
        examples=["VIKING GP. Top"],
    )


class Offset(RootModel[float]):
    root: float = Field(..., examples=[11.2])


class Stratigraphic(RootModel[bool]):
    root: bool = Field(
        ...,
        description="True if surface represents an entity in the stratigraphic column",
        examples=[True],
    )


class Aggregation(RootModel[Any]):
    root: Any


class Case(RootModel[Any]):
    root: Any


class Iteration(RootModel[Any]):
    root: Any


class Model(RootModel[Any]):
    root: Any


class Realization(RootModel[Any]):
    root: Any


class Workflow(RootModel[Any]):
    root: Any


class FieldDescription(RootModel[List[str]]):
    root: list[str]


class Datetime(RootModel[str]):
    root: str = Field(..., examples=["2020-10-28T14:28:02"])


class User(BaseModel):
    id: str = Field(..., examples=["peesv"], title="User ID")


class Uuid(RootModel[str]):
    root: str = Field(
        ...,
        examples=["ad214d85-8a1d-19da-e053-c918a4889309"],
        pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$",
    )


class Fmu(BaseModel):
    """
    The FMU block records properties that are specific to FMU
    """

    model: Model
    case: Case


class Fmu1(BaseModel):
    """
    The FMU block records properties that are specific to FMU
    """

    model: Model
    case: Case
    iteration: Iteration
    workflow: Workflow
    realization: Realization


class Fmu2(BaseModel):
    """
    The FMU block records properties that are specific to FMU
    """

    model: Model
    case: Case
    iteration: Iteration
    workflow: Workflow
    aggregation: Aggregation


class FMUTimeObjectItem(BaseModel):
    value: Datetime | None = None
    label: str | None = Field(default=None, examples=["Label for time stamp"])


class FMUTimeObject(RootModel[List[FMUTimeObjectItem]]):
    """
    List of time stamps referring to simulated time
    """

    root: list[FMUTimeObjectItem] = Field(
        ...,
        description="List of time stamps referring to simulated time",
        min_length=1,
        title="FMU time object",
    )


class TracklogEvent(BaseModel):
    datetime: Datetime | None = None
    user: User | None = None
    event: str | None = Field(default=None, examples=["created", "updated"])


class Tracklog(RootModel[List[TracklogEvent]]):
    root: list[TracklogEvent]


class Top(BaseModel):
    name: Name | None = None
    stratigraphic: Stratigraphic | None = None
    offset: Offset | None = None


class Base(BaseModel):
    name: Name | None = None
    stratigraphic: Stratigraphic | None = None
    offset: Offset | None = None


class TheDataBlock(BaseModel):
    name: str = Field(
        ...,
        description=(
            "Name of the surface. If stratigraphic, match the entry "
            "in the stratigraphic column"
        ),
        examples=["VIKING GP. Top"],
    )
    stratigraphic: bool = Field(
        ...,
        description="True if surface represents an entity in the stratigraphic column",
        examples=[True],
    )
    alias: list[Name] | None = None
    stratigraphic_alias: list[Name] | None = None
    offset: float | None = Field(default=None, examples=[11.2])
    top: Top | None = None
    base: Base | None = None
    content: str = Field(
        ..., description="The contents of this data object", examples=["depth"]
    )
    tagname: str | None = Field(
        default=None,
        description="A semi-human readable tag for internal usage and uniqueness",
        examples=["ds_extract_geogrid", "ds_post_strucmod"],
    )
    properties: list[Property] | None = None
    format: str = Field(..., examples=["irap_binary"])
    layout: str | None = Field(default=None, examples=["regular"])
    unit: str | None = Field(default=None, examples=["m"])
    vertical_domain: VerticalDomain | None = Field(default=None, examples=["depth"])
    depth_reference: DepthReference | None = Field(default=None, examples=["msl"])
    grid_model: GridModel | None = None
    spec: Spec
    bbox: Bbox | None = None
    time: FMUTimeObject | None = None
    is_prediction: bool = Field(..., examples=[True], title="Is prediction flag")
    is_observation: bool = Field(..., examples=[True], title="Is observation flag")
    description: FieldDescription | None = None


class CountryItem(BaseModel):
    identifier: str = Field(..., examples=["Norway"])
    uuid: Uuid


class DiscoveryItem(BaseModel):
    short_identifier: str = Field(..., examples=["SomeDiscovery"])
    uuid: Uuid


class FieldItem(BaseModel):
    identifier: str = Field(..., examples=["OseFax"])
    uuid: Uuid


class CoordinateSystem(BaseModel):
    identifier: str = Field(..., examples=["ST_WGS84_UTM37N_P32637"])
    uuid: Uuid


class StratigraphicColumn(BaseModel):
    identifier: str = Field(..., examples=["DROGON_2020"])
    uuid: Uuid


class Smda(BaseModel):
    country: list[CountryItem]
    discovery: list[DiscoveryItem]
    field: list[FieldItem]
    coordinate_system: CoordinateSystem
    stratigraphic_column: StratigraphicColumn


class Masterdata(BaseModel):
    smda: Smda


class Model1(BaseModel):
    name: str | None = Field(default=None, examples=["Drogon"])
    revision: str | None = Field(default=None, examples=["21.0.0.dev"])
    description: FieldDescription | None = Field(
        default=None, description="This is a free text description of the model setup"
    )


class Case1(BaseModel):
    name: str = Field(..., description="The case name", examples=["MyCaseName"])
    uuid: Uuid
    user: User = Field(..., description="The user name used in ERT")
    restart_from: str | None = Field(
        default=None,
        description=(
            "A reference to another case/iteration that this "
            "iteration was restarted from"
        ),
    )
    description: FieldDescription | None = None


class Iteration1(BaseModel):
    name: str = Field(
        ...,
        description="The convential name of this iteration, e.g. iter-0 or pred",
        examples=["iter-0"],
    )
    id: int = Field(
        ...,
        description=(
            "The internal identification of this "
            "iteration, e.g. the iteration number"
        ),
        examples=[0],
    )
    uuid: Uuid


class Realization1(BaseModel):
    name: str = Field(
        ...,
        description="The convential name of this iteration, e.g. iter-0 or pred",
        examples=["iter-0"],
    )
    id: int = Field(
        ...,
        description="The unique number of this realization as used in FMU",
        examples=[33],
    )
    uuid: Uuid
    parameters: dict[str, Any] | None = Field(
        default=None, description="Parameters for this realization"
    )
    jobs: dict[str, Any] | None = Field(
        default=None,
        description=(
            "Content directly taken from the ERT jobs.json " "file for this realization"
        ),
    )


class Fmu3(BaseModel):
    model: Model1 | None = None
    workflow: Workflow1 | None = None
    case: Case1 | None = None
    iteration: Iteration1 | None = None
    realization: Realization1 | None = None
    aggregation: Aggregation1 | None = None


class CaseModel(BaseModel):
    source: Source
    version: FMUResultsMetadataVersion
    data: TheDataBlock | None = None
    tracklog: Tracklog
    access: Access
    masterdata: Masterdata
    class_: MetadataClass = Field(..., alias="class")
    fmu: Fmu = Field(
        ..., description="The FMU block records properties that are specific to FMU"
    )


class DataObject(BaseModel):
    source: Source
    version: FMUResultsMetadataVersion
    data: TheDataBlock
    tracklog: Tracklog
    access: Access
    masterdata: Masterdata
    class_: MetadataClass = Field(..., alias="class")
    fmu: Fmu1 | Fmu2 = Field(
        ..., description="The FMU block records properties that are specific to FMU"
    )
    file: File


class ModelModel(RootModel[Union[CaseModel, DataObject]]):
    root: CaseModel | DataObject


### V3?


class GeologicalModel(BaseModel):
    type: Literal["Structural", "Rock"]


class RockGeologicalModel(GeologicalModel):
    type: Literal["Rock"] = "Rock"


class StructuralGeologicalModel(GeologicalModel):
    type: Literal["Structural"] = "Structural"


class Shape(BaseModel):
    ncol: int = Field(ge=0)
    nrow: int = Field(ge=0)
    nlay: int = Field(ge=0)


class Orientation(BaseModel):
    x: float
    y: float
    z: float


class Grid(BaseModel):
    coordinate_system: CoordinateSystem
    orientation: Orientation
    shape: Shape
    undef: float | None


class Range(BaseModel):
    start: float
    stop: float


class BoundingBox(BaseModel):
    x: Range
    y: Range
    z: Range


class Header(BaseModel):
    asset: str
    created_at: Datetime
    created_by: str
    version: int


class Payland(BaseModel):
    type: Literal["fmu.everest", "fmu.ert"]


class FMUEverest(Payland):
    type: Literal["fmu.everest"] = "fmu.everest"


class FMUErt(BaseModel):
    type: Literal["fmu.ert"] = "fmu.ert"
    model: Annotated[
        StructuralGeologicalModel | RockGeologicalModel,
        Field(discriminator="type"),
    ]


class Export(BaseModel):
    header: Header
    payload: Annotated[
        FMUEverest | FMUErt,
        Field(discriminator="type"),
    ]
